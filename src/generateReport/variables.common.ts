import type { ContractType, ContractFunctionTest } from "./types.contract";
import { abis } from "@fractal-framework/fractal-contracts";
import { combineAbis } from "./helpers.common";

export const SENTINEL_ADDRESS = "0x0000000000000000000000000000000000000001";
export const defaultContractType: ContractType = {
  isClaimErc20: false,
  isFreezeGuardAzorius: false,
  isFreezeGuardMultisig: false,
  isFreezeVotingErc20: false,
  isFreezeVotingErc721: false,
  isFreezeVotingMultisig: false,
  isLinearVotingErc20: false,
  isLinearVotingErc721: false,
  isModuleAzorius: false,
  isModuleFractal: false,
  isVotesErc20: false,
  isLinearVotingErc20WithHatsProposalCreation: false,
  isLinearVotingErc721WithHatsProposalCreation: false,
};
export const contractTests: ContractFunctionTest[] = [
  {
    abi: abis.ERC20Claim,
    functionNames: [
      "childERC20",
      "parentERC20",
      "deadlineBlock",
      "funder",
      "owner",
      "parentAllocation",
      "snapShotId",
    ],
    resultKey: "isClaimErc20",
  },
  {
    abi: combineAbis(abis.AzoriusFreezeGuard, abis.MultisigFreezeGuard),
    functionNames: ["freezeVoting", "owner"],
    revertFunctionNames: ["childGnosisSafe", "timelockPeriod", "executionPeriod"],
    resultKey: "isFreezeGuardAzorius",
  },
  {
    abi: abis.MultisigFreezeGuard,
    functionNames: [
      "childGnosisSafe",
      "executionPeriod",
      "freezeVoting",
      "owner",
      "timelockPeriod",
    ],
    resultKey: "isFreezeGuardMultisig",
  },
  {
    abi: abis.ERC20FreezeVoting,
    functionNames: [
      "votesERC20",
      "freezePeriod",
      "freezeProposalPeriod",
      "freezeProposalVoteCount",
      "freezeVotesThreshold",
      "isFrozen",
      "owner",
    ],
    resultKey: "isFreezeVotingErc20",
  },
  {
    abi: abis.ERC721FreezeVoting,
    functionNames: [
      "strategy",
      "owner",
      "isFrozen",
      "freezeVotesThreshold",
      "freezePeriod",
      "freezeProposalVoteCount",
      "freezeProposalPeriod",
    ],
    resultKey: "isFreezeVotingErc721",
  },
  {
    abi: abis.MultisigFreezeVoting,
    functionNames: [
      "parentGnosisSafe",
      "freezePeriod",
      "freezeProposalPeriod",
      "freezeProposalVoteCount",
      "isFrozen",
      "owner",
    ],
    resultKey: "isFreezeVotingMultisig",
  },
  {
    abi: combineAbis(abis.LinearERC20Voting, abis.LinearERC20VotingWithHatsProposalCreation),
    revertFunctionNames: ["getWhitelistedHatIds"],
    functionNames: [
      "BASIS_DENOMINATOR",
      "QUORUM_DENOMINATOR",
      "azoriusModule",
      "basisNumerator",
      "governanceToken",
      "owner",
      "quorumNumerator",
      "votingPeriod",
      "requiredProposerWeight",
    ],
    resultKey: "isLinearVotingErc20",
  },
  {
    abi: abis.LinearERC20VotingWithHatsProposalCreation,
    functionNames: [
      "BASIS_DENOMINATOR",
      "QUORUM_DENOMINATOR",
      "azoriusModule",
      "basisNumerator",
      "governanceToken",
      "owner",
      "quorumNumerator",
      "votingPeriod",
      "requiredProposerWeight",
      "getWhitelistedHatIds",
    ],
    resultKey: "isLinearVotingErc20WithHatsProposalCreation",
  },
  {
    abi: combineAbis(abis.LinearERC721Voting, abis.LinearERC721VotingWithHatsProposalCreation),
    revertFunctionNames: ["getWhitelistedHatIds"],
    functionNames: [
      "BASIS_DENOMINATOR",
      "azoriusModule",
      "basisNumerator",
      "getAllTokenAddresses",
      "owner",
      "proposerThreshold",
      "quorumThreshold",
      "votingPeriod",
    ],
    resultKey: "isLinearVotingErc721",
  },
  {
    abi: abis.LinearERC721VotingWithHatsProposalCreation,
    functionNames: [
      "BASIS_DENOMINATOR",
      "azoriusModule",
      "basisNumerator",
      "getAllTokenAddresses",
      "owner",
      "proposerThreshold",
      "quorumThreshold",
      "votingPeriod",
      "getWhitelistedHatIds",
    ],
    resultKey: "isLinearVotingErc721WithHatsProposalCreation",
  },
  {
    abi: abis.Azorius,
    functionNames: [
      "avatar",
      "target",
      "guard",
      "getGuard",
      "executionPeriod",
      "totalProposalCount",
      "timelockPeriod",
      "owner",
      "DOMAIN_SEPARATOR_TYPEHASH",
      "TRANSACTION_TYPEHASH",
    ],
    resultKey: "isModuleAzorius",
  },
  {
    abi: combineAbis(abis.FractalModule, abis.Azorius),
    functionNames: ["avatar", "target", "getGuard", "guard", "owner"],
    revertFunctionNames: [
      "timelockPeriod",
      "executionPeriod",
      "totalProposalCount",
      "DOMAIN_SEPARATOR_TYPEHASH",
      "TRANSACTION_TYPEHASH",
    ],
    resultKey: "isModuleFractal",
  },
  {
    abi: combineAbis(abis.VotesERC20, abis.VotesERC20Wrapper),
    functionNames: ["decimals", "name", "owner", "symbol", "totalSupply"],
    revertFunctionNames: ["underlying"],
    resultKey: "isVotesErc20",
  },
];
